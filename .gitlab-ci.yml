stages:
  - prep
  - build
  - test
  - deliver
  - deploy

default:
  image: docker:24.0.1

variables:
  GITLAB_IMAGE_BASE: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"
  DOCKER_IMAGE_BASE: "$DOCKER_HUB_USER/$CI_PROJECT_NAME"

preparation:
  stage: prep
  tags:
    - dev
  script:
    - export BUILD_ID=$(date +%Y%m%d%H%M)
    - echo "BUILD_ID=${BUILD_ID}" > context.env
  artifacts:
    reports:
      dotenv: context.env

include:
  - "/.utils_ci.yml"
  - "/services/auth_service/.auth_ci.yml"
  - "/services/category_service/.category_ci.yml"
  - "/services/product_coordinator_service/.product_coordinator_ci.yml"
  - "/services/products_service/.products_ci.yml"
  - "/services/pruchase_orders_service/.pruchase_orders_ci.yml"
  - "/services/reviews_service/.reviews_ci.yml"
  - "/services/shopping_cart_service/.shopping_cart_ci.yml"
  - "/services/tags_service/.tags_ci.yml"
  - "/services/users_service/.users_ci.yml"


# .export-env-variables: &export-env-variables
#   reports:
#         dotenv: context.env
# test-api:
#   stage: test
#   tags:
#     - dev
#   script:
#     - export $(cat context.env | xargs)

#     - export API_IMAGE=$API_TEST_IMAGE_NAME
#     - export CLIENT_IMAGE=dummy-image

#     - docker login -u $CI_REGISTRY_USER --password $CI_JOB_TOKEN $CI_REGISTRY

#     - docker compose -f docker-compose.yml --env-file .env.dev --profile api pull
#     - docker compose -f docker-compose.yml --env-file .env.dev --profile api up --abort-on-container-exit
#     - docker cp foodtruckers_api:/usr/src/app/coverage.xml .
#     - docker cp foodtruckers_api:/usr/src/app/report.xml .
#   artifacts:
#     when: always
#     paths:
#       - coverage.xml
#       - report.xml
#     reports:
#       junit: report.xml
#   needs:
#     - job: preparation
#     - job: build-api
#       artifacts: true

# test-integration:
#   stage: test
#   tags:
#     - dev
#   script:
#     - export $(cat context.env | xargs)
#     - docker login -u $CI_REGISTRY_USER --password $CI_JOB_TOKEN $CI_REGISTRY

#     - export API_IMAGE=$API_TEST_IMAGE_NAME
#     - export CLIENT_IMAGE=$CLIENT_TEST_IMAGE_NAME
#     - export TEST_TARGET=INTEGRATION
#     - docker compose -f docker-compose.yml --env-file .env.dev --profile all pull
#     - docker compose -f docker-compose.yml --env-file .env.dev --profile all up --abort-on-container-exit
#   needs:
#     - job: test-api
#     - job: build-client
#     - job: preparation
#       artifacts: true

# deliver-dockerhub:
#   stage: deliver
#   tags:
#     - dev
#   script:
#     - docker login -u $CI_REGISTRY_USER --password $CI_JOB_TOKEN $CI_REGISTRY
#     - docker login -u $DOCKER_HUB_USER --password $DOCKER_HUB_PASS

#     - docker tag $API_PROD_IMAGE_NAME $DOCKER_HUB_API_IMAGE
#     # - docker tag $CLIENT_PROD_IMAGE_NAME $DOCKER_HUB_CLIENT_IMAGE
#     - docker push $DOCKER_HUB_API_IMAGE
#   #     - docker push $DOCKER_HUB_CLIENT_IMAGE
#   needs:
#     # - job: test-integration
#     - job: preparation
#       artifacts: true
#     - job: build-api
#       artifacts: true

# deploy-prod:
#   stage: deploy
#   tags:
#     - prod
#   script:
#     - export API_IMAGE=$DOCKER_HUB_API_IMAGE
#     # - export CLIENT_IMAGE=$DOCKER_HUB_CLIENT_IMAGE

#     - docker login -u $DOCKER_HUB_USER --password $DOCKER_HUB_PASS

#     - docker compose -f docker-compose.yml stop
#     - docker compose -f docker-compose.yml rm
#     - docker compose -f docker-compose.yml pull
#     - docker compose -f docker-compose.yml up -d
#   needs:
#     - job: deliver-dockerhub
#     - job: preparation
#       artifacts: true
