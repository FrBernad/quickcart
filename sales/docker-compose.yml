version: "3.3"
services:
  purchase_orders_api:
    container_name: purchase_orders_api_${ENV}
    image: ${PURCHASE_ORDERS_SERVICE_IMAGE}
    profiles:
      - purchase_orders_api
      - all
    restart: always
    environment:
      - ENV=${ENV}
      - SERVICE_NAME=purchase_orders_api
      - POSTGRES_USER=${PURCHASE_ORDERS_DB_USER}
      - POSTGRES_PASSWORD=${PURCHASE_ORDERS_DB_PASSWORD}
      - POSTGRES_DB=${PURCHASE_ORDERS_DB}
      - POSTGRES_SERVICE=purchase_orders_db
      - EXPOSED_INTERFACES=${EXPOSED_INTERFACES}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5000/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    depends_on:
      purchase_orders_db:
        condition: service_healthy
    networks:
      - purchase_orders
      - services

  purchase_orders_db:
    container_name: purchase_orders_db_${ENV}
    image: postgres:15
    profiles:
      - purchase_orders_api
      - all
    restart: always
    environment:
      - POSTGRES_USER=${PURCHASE_ORDERS_DB_USER}
      - POSTGRES_PASSWORD=${PURCHASE_ORDERS_DB_PASSWORD}
      - POSTGRES_DB=${PURCHASE_ORDERS_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: purchase_orders_db_vol
        target: /var/lib/postgresql/data
    networks:
      - purchase_orders
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${PURCHASE_ORDERS_DB} -U $${PURCHASE_ORDERS_DB_USER}"
        ]
      interval: 4s
      timeout: 5s
      retries: 5

networks:
  purchase_orders:
    name: purchase_orders_api_${ENV}
    internal: true
  services:
    name: services_${ENV}
    external: true

volumes:
  purchase_orders_db_vol:
    name: purchase_orders_db_vol_${ENV}