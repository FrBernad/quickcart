version: "3.3"
services:
  category_api:
    container_name: category_api_${ENV}
    image: ${CATEGORY_SERVICE_IMAGE}
    profiles:
      - category_api
      - all
    ports:
      - "5000"
    restart: always
    depends_on:
      categories_db:
        condition: service_healthy
    environment:
      - ENV=${ENV}
      - SERVICE_NAME=category_api
      - POSTGRES_USER=${CATEGORIES_DB_USER}
      - POSTGRES_PASSWORD=${CATEGORIES_DB_PASSWORD}
      - POSTGRES_DB=${CATEGORIES_DB}
      - POSTGRES_SERVICE=categories_db
      - EXPOSED_INTERFACES=${EXPOSED_INTERFACES}
    networks:
      - category
      - domain
      - default

  categories_db:
    container_name: categories_db_${ENV}
    image: postgres:15
    profiles:
      - category_api
      - all
    restart: always
    environment:
      - POSTGRES_USER=${CATEGORIES_DB_USER}
      - POSTGRES_PASSWORD=${CATEGORIES_DB_PASSWORD}
      - POSTGRES_DB=${CATEGORIES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: categories_db_vol
        target: /var/lib/postgresql/data
    networks:
      - category
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${USERS_DB} -U $${USERS_DB_USER}"
        ]
      interval: 4s
      timeout: 5s
      retries: 5

  product_coordinator_api:
    container_name: product_coordinator_api_${ENV}
    image: ${PRODUCT_COORDINATOR_SERVICE_IMAGE}
    profiles:
      - product_coordinator_api
      - all
    ports:
      - "5000"
    restart: always
    environment:
      - SERVICE_NAME=product_coordinator_api
    networks:
      - product_coordinator
      - domain
      - default

  products_api:
    container_name: products_api_${ENV}
    image: ${PRODUCTS_SERVICE_IMAGE}
    profiles:
      - products_api
      - all
    ports:
      - "5000"
    restart: always
    environment:
      - SERVICE_NAME=products_api
    networks:
      - products
      - domain
      - default


  reviews_api:
    container_name: reviews_api_${ENV}
    image: ${REVIEWS_SERVICE_IMAGE}
    profiles:
      - reviews_api
      - all
    ports:
      - "5000"
    restart: always
    environment:
      - SERVICE_NAME=reviews_api
    networks:
      - reviews
      - domain
      - default
  tags_api:
    container_name: tags_api_${ENV}
    image: ${TAGS_SERVICE_IMAGE}
    profiles:
      - tags_api
      - all
    ports:
      - "5000"
    restart: always
    environment:
      - SERVICE_NAME=tags_api
    networks:
      - tags
      - domain
      - default

networks:
  category:
    name: category_api_${ENV}
    internal: true
  tags:
    name: tags_api_${ENV}
    internal: true
  reviews:
    name: reviews_api_${ENV}
    internal: true
  products:
    name: products_api_${ENV}
    internal: true
  product_coordinator:
    name: product_coordinator_api_${ENV}
    internal: true
  domain:
    name: products_${ENV}

volumes:
  categories_db_vol:
    name: purchase_orders_db_vol_${ENV}
