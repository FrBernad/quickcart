version: "3.3"
services:
  categories_api:
    container_name: categories_api_${ENV}
    image: ${CATEGORIES_SERVICE_IMAGE}
    profiles:
      - categories_api
      - all
    ports:
      - "5000"
    restart: always
    depends_on:
      categories_db:
        condition: service_healthy
    environment:
      - ENV=${ENV}
      - SERVICE_NAME=categories_api
      - POSTGRES_USER=${CATEGORIES_DB_USER}
      - POSTGRES_PASSWORD=${CATEGORIES_DB_PASSWORD}
      - POSTGRES_DB=${CATEGORIES_DB}
      - POSTGRES_SERVICE=categories_db
      - EXPOSED_INTERFACES=${EXPOSED_INTERFACES}
    networks:
      - categories
      - services

  categories_db:
    container_name: categories_db_${ENV}
    image: postgres:15
    profiles:
      - categories_api
      - all
    restart: always
    environment:
      - POSTGRES_USER=${CATEGORIES_DB_USER}
      - POSTGRES_PASSWORD=${CATEGORIES_DB_PASSWORD}
      - POSTGRES_DB=${CATEGORIES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: categories_db_vol
        target: /var/lib/postgresql/data
    networks:
      - categories
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${CATEGORIES_DB} -U $${CATEGORIES_DB_USER}"
        ]
      interval: 4s
      timeout: 5s
      retries: 5

  products_api:
    container_name: products_api_${ENV}
    image: ${PRODUCTS_SERVICE_IMAGE}
    profiles:
      - products_api
      - all
    ports:
      - "5000"
    restart: always
    depends_on:
      products_db:
        condition: service_healthy
    environment:
      - ENV=${ENV}
      - SERVICE_NAME=products_api
      - POSTGRES_USER=${PRODUCTS_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCTS_DB_PASSWORD}
      - POSTGRES_DB=${PRODUCTS_DB}
      - POSTGRES_SERVICE=products_db
      - EXPOSED_INTERFACES=${EXPOSED_INTERFACES}
    networks:
      - products
      - services

  products_db:
    container_name: products_db_${ENV}
    image: postgres:15
    profiles:
      - products_api
      - all
    restart: always
    environment:
      - POSTGRES_USER=${PRODUCTS_DB_USER}
      - POSTGRES_PASSWORD=${PRODUCTS_DB_PASSWORD}
      - POSTGRES_DB=${PRODUCTS_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: products_db_vol
        target: /var/lib/postgresql/data
    networks:
      - products
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${PRODUCTS_DB} -U $${PRODUCTS_DB_USER}"
        ]
      interval: 4s
      timeout: 5s
      retries: 5

  reviews_api:
    container_name: reviews_api_${ENV}
    image: ${REVIEWS_SERVICE_IMAGE}
    profiles:
      - reviews_api
      - all
    ports:
      - "5000"
    restart: always
    environment:
      - ENV=${ENV}
      - SERVICE_NAME=reviews_api
      - POSTGRES_USER=${REVIEWS_DB_USER}
      - POSTGRES_PASSWORD=${REVIEWS_DB_PASSWORD}
      - POSTGRES_DB=${REVIEWS_DB}
      - POSTGRES_SERVICE=reviews_db
      - EXPOSED_INTERFACES=${EXPOSED_INTERFACES}
    networks:
      - reviews
      - services

  reviews_db:
    container_name: reviews_db_${ENV}
    image: postgres:15
    profiles:
      - reviews_api
      - all
    restart: always
    environment:
      - POSTGRES_USER=${REVIEWS_DB_USER}
      - POSTGRES_PASSWORD=${REVIEWS_DB_PASSWORD}
      - POSTGRES_DB=${REVIEWS_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: products_db_vol
        target: /var/lib/postgresql/data
    networks:
      - reviews
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${REVIEWS_DB} -U $${REVIEWS_DB_USER}"
        ]
      interval: 4s
      timeout: 5s
      retries: 5

networks:
  categories:
    name: categories_api_${ENV}
    internal: true
  reviews:
    name: reviews_api_${ENV}
    internal: true
  products:
    name: products_api_${ENV}
    internal: true
  services:
    name: services_${ENV}
    external: true

volumes:
  categories_db_vol:
    name: categories_db_vol_${ENV}
  products_db_vol:
    name: products_db_vol_${ENV}
  reviews_db_vol:
    name: reviews_db_vol_${ENV}
